try{!function(){var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},t=(new e.Error).stack;t&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[t]="b66962cc-65b5-4125-a6cd-f80875a06994",e._sentryDebugIdIdentifier="sentry-dbid-b66962cc-65b5-4125-a6cd-f80875a06994")}()}catch(e){}(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[59117],{30373:(e,t,n)=>{"use strict";function s(e,t,n){if(e instanceof EventTarget)return[e];if("string"==typeof e){let s=document;t&&(s=t.current);let a=n?.[e]??s.querySelectorAll(e);return a?Array.from(a):[]}return Array.from(e)}n.d(t,{K:()=>s})},38955:(e,t,n)=>{"use strict";n.d(t,{s:()=>m});var s=n(37876),a=n(66028),r=n(41711),i=n(84437),o=n(65987),l=n(75298),c=n(15294);function d(e){let{size:t="md",className:n}=e;return(0,s.jsx)("div",{className:(0,a.mergeClasses)("flex items-center justify-center rounded-full border-2 border-success bg-success","md"===t&&"size-20","sm"===t&&"size-15",n),children:(0,s.jsx)(c.CheckIcon,{className:(0,a.mergeClasses)("text-success","md"===t&&"size-10","sm"===t&&"size-[30px]")})})}var h=n(8051);function m(e){let{currentChapterIndex:t,name:n,summary:c,nextChapterTitle:m,nextChapterDescription:u,nextChapterLink:p}=e,{chapters:x,setChapters:g,getStartedChapters:j,setGetStartedChapters:f}=(0,i.N)(),v="GET_STARTED"===n,y=v?j[t]:x[t];return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("div",{className:"mx-auto flex w-full flex-col gap-4 rounded-lg border-2 border-palette-gray4 px-4 py-5",children:[(0,s.jsx)(d,{size:"sm",className:(0,a.mergeClasses)("mx-auto flex items-center justify-center grayscale transition duration-300",y.completed&&"border-palette-green5 grayscale-0")}),(0,s.jsxs)("div",{className:"flex flex-col items-center justify-center gap-2",children:[(0,s.jsxs)("p",{className:"flex items-center text-center font-semibold text-default heading-lg",children:[(0,s.jsx)(r.BookOpen02Icon,{className:"mr-2 size-6 text-icon-secondary max-md-gutters:hidden"})," ",y.title]}),(0,s.jsx)("p",{className:"max-w-[60ch] pb-2 text-center leading-normal text-secondary",children:c})]}),(0,s.jsx)("div",{className:"flex items-center justify-center",children:(0,s.jsx)(h.S,{id:`chapter-${t}`,checked:y.completed,label:y.completed?"Mark this chapter as unread":"Mark this chapter as read",onChange:v?()=>{y.completed?f(j.map((e,n)=>n===t?{...e,completed:!1}:e)):f(j.map((e,n)=>n===t?{...e,completed:!0}:e))}:()=>{y.completed?g(x.map((e,n)=>n===t?{...e,completed:!1}:e)):g(x.map((e,n)=>n===t?{...e,completed:!0}:e))}})})]}),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.P,{className:"my-4",children:u}),(0,s.jsx)(o.u,{href:p,title:`Next: ${m}`,Icon:r.BookOpen02Icon})]})]})}},51567:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__N_SSG:()=>c,default:()=>u,headings:()=>h,meta:()=>d});var s=n(37876),a=n(91668),r=n(72486),i=n(38955),o=n(87249),l=n(58674),c=!0;let d={modificationDate:"June 06, 2025",title:"Add gestures",description:"In this tutorial, learn how to implement gestures from React Native Gesture Handler and Reanimated libraries.",hasVideoLink:!0},h=[{depth:2,type:"text",title:"Add GestureHandlerRootView"},{depth:2,type:"text",title:"Use animated components"},{depth:2,type:"text",title:"Add a tap gesture"},{depth:2,type:"text",title:"Add a pan gesture"},{depth:2,type:"text",title:"Summary"}];function m(e){let t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Gestures are a great way to provide an intuitive user experience in an app. The ",(0,s.jsx)(t.a,{href:"https://docs.swmansion.com/react-native-gesture-handler/docs/",children:"React Native Gesture Handler"})," library provides built-in native components that can handle gestures. It recognizes pan, tap, rotation, and other gestures using the platform's native touch handling system. In this chapter, we'll add two different gestures using this library:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Double tap to scale the size of the emoji sticker and reduce the scale when double tapped again."}),"\n",(0,s.jsx)(t.li,{children:"Pan to move the emoji sticker around the screen so that the user can place the sticker anywhere on the image."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["We'll also use the ",(0,s.jsx)(t.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/handling-gestures/",children:"Reanimated"})," library to animate between gesture states."]}),"\n",(0,s.jsx)(l.r,{videoId:"0q48LLvTGDU",title:"Watch: Adding gestures to your universal Expo app"}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsxs)(o.p,{label:"1",children:[(0,s.jsx)(t.h2,{id:"add-gesturehandlerrootview",children:"Add GestureHandlerRootView"}),(0,s.jsxs)(t.p,{children:["To get gesture interactions to work in the app, we'll render ",(0,s.jsx)(t.code,{children:"<GestureHandlerRootView>"})," from ",(0,s.jsx)(t.code,{children:"react-native-gesture-handler"})," at the top of ",(0,s.jsx)(t.code,{children:"Index"})," component. Replace the root level ",(0,s.jsx)(t.code,{children:"<View>"})," component in the ",(0,s.jsx)(t.strong,{children:"app/(tabs)/index.tsx"})," with ",(0,s.jsx)(t.code,{children:"<GestureHandlerRootView>"}),"."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"@@@app/(tabs)/index.tsx@@@// ... rest of the import statements remain same\n/* @tutinfo Import <CODE>GestureHandlerRootView</CODE> from <CODE>react-native-gesture-handler-library</CODE>. */import { GestureHandlerRootView } from 'react-native-gesture-handler';/* @end */\n\nexport default function Index() {\n  return (\n    /* @tutinfo Replace the root level <CODE>View</CODE> component with <CODE>GestureHandlerRootView</CODE>. */\n    <GestureHandlerRootView style={styles.container}>\n    /* @end */\n      {/* ...rest of the code remains */}\n    /* @tutinfo */\n    </GestureHandlerRootView>\n    /* @end */\n  )\n}\n"})})]}),"\n",(0,s.jsxs)(o.p,{label:"2",children:[(0,s.jsx)(t.h2,{id:"use-animated-components",children:"Use animated components"}),(0,s.jsxs)(t.p,{children:["An ",(0,s.jsx)(t.code,{children:"Animated"})," component looks at the ",(0,s.jsx)(t.code,{children:"style"})," prop of the component and determines which values to animate and apply updates to create an animation. Reanimated exports animated components such as ",(0,s.jsx)(t.code,{children:"<Animated.View>"}),", ",(0,s.jsx)(t.code,{children:"<Animated.Text>"}),", or ",(0,s.jsx)(t.code,{children:"<Animated.ScrollView>"}),". We will apply animations to the ",(0,s.jsx)(t.code,{children:"<Animated.Image>"})," component to make a double tap gesture work."]}),(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Open the ",(0,s.jsx)(t.strong,{children:"EmojiSticker.tsx"})," file in the ",(0,s.jsx)(t.strong,{children:"components"})," directory. Inside it, import ",(0,s.jsx)(t.code,{children:"Animated"})," from the ",(0,s.jsx)(t.code,{children:"react-native-reanimated"})," library to use animated components."]}),"\n",(0,s.jsxs)(t.li,{children:["Replace the ",(0,s.jsx)(t.code,{children:"Image"})," component with ",(0,s.jsx)(t.code,{children:"<Animated.Image>"}),"."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"@@@components/EmojiSticker.tsx@@@import { ImageSourcePropType, View } from 'react-native';\n/* @tutinfo Import <CODE>Animated</CODE> from <CODE>react-native-reanimated</CODE>. */import Animated from 'react-native-reanimated';/* @end */\n\ntype Props = {\n  imageSize: number;\n  stickerSource: ImageSourcePropType;\n};\n\nexport default function EmojiSticker({ imageSize, stickerSource }: Props) {\n  return (\n    <View style={{ top: -350 }}>\n      /* @tutinfo Replace the <CODE>Image</CODE> component with <CODE>Animated.Image</CODE>. */\n      <Animated.Image\n        source={stickerSource}\n        resizeMode=\"contain\"\n        style={{ width: imageSize, height: imageSize }}\n      />\n      /* @end */\n    </View>\n  );\n}\n"})}),(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["For a complete reference of the animated component API, see ",(0,s.jsx)(t.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/core/createAnimatedComponent",children:"React Native Reanimated"})," documentation."]}),"\n"]})]}),"\n",(0,s.jsxs)(o.p,{label:"3",children:[(0,s.jsx)(t.h2,{id:"add-a-tap-gesture",children:"Add a tap gesture"}),(0,s.jsx)(t.p,{children:"React Native Gesture Handler allows us to add behavior when it detects touch input, like a double tap event."}),(0,s.jsxs)(t.p,{children:["In the ",(0,s.jsx)(t.strong,{children:"EmojiSticker.tsx"})," file:"]}),(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Import ",(0,s.jsx)(t.code,{children:"Gesture"})," and ",(0,s.jsx)(t.code,{children:"GestureDetector"})," from ",(0,s.jsx)(t.code,{children:"react-native-gesture-handler"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["To recognize the tap on the sticker, import ",(0,s.jsx)(t.code,{children:"useAnimatedStyle"}),", ",(0,s.jsx)(t.code,{children:"useSharedValue"}),", and ",(0,s.jsx)(t.code,{children:"withSpring"})," from ",(0,s.jsx)(t.code,{children:"react-native-reanimated"})," to animate the style of the ",(0,s.jsx)(t.code,{children:"<Animated.Image>"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Inside the ",(0,s.jsx)(t.code,{children:"EmojiSticker"})," component, create a reference called ",(0,s.jsx)(t.code,{children:"scaleImage"})," using the ",(0,s.jsx)(t.code,{children:"useSharedValue()"})," hook. It will take the value of ",(0,s.jsx)(t.code,{children:"imageSize"})," as its initial value."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"@@@components/EmojiSticker.tsx@@@// ...rest of the import statements remain same\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedStyle, useSharedValue, withSpring } from 'react-native-reanimated';\n\nexport default function EmojiSticker({ imageSize, stickerSource }: Props) {\n  const scaleImage = useSharedValue(imageSize);\n\n  return (\n    // ...rest of the code remains same\n  )\n}\n"})}),(0,s.jsxs)(t.p,{children:["Creating a shared value using the ",(0,s.jsx)(t.code,{children:"useSharedValue()"})," hook has many advantages. It helps to mutate data and runs animations based on the current value. We can access and modify the shared value using the ",(0,s.jsx)(t.code,{children:".value"})," property. We'll create a ",(0,s.jsx)(t.code,{children:"doubleTap"})," object to scale the initial value and use ",(0,s.jsx)(t.code,{children:"Gesture.Tap()"})," to animate the transition while scaling the sticker image. To determine the number of taps required, we'll add ",(0,s.jsx)(t.code,{children:"numberOfTaps()"}),"."]}),(0,s.jsxs)(t.p,{children:["Create the following object in the ",(0,s.jsx)(t.code,{children:"EmojiSticker"})," component:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"@@@components/EmojiSticker.tsx@@@const doubleTap = Gesture.Tap()\n  .numberOfTaps(2)\n  .onStart(() => {\n    if (scaleImage.value !== imageSize * 2) {\n      scaleImage.value = scaleImage.value * 2;\n    } else {\n      scaleImage.value = Math.round(scaleImage.value / 2);\n    }\n  });\n"})}),(0,s.jsxs)(t.p,{children:["To animate the transition, let's use a spring-based animation. This will make it feel alive because it's based on the real-world physics of a spring. We will use the ",(0,s.jsx)(t.code,{children:"withSpring()"})," function provided by ",(0,s.jsx)(t.code,{children:"react-native-reanimated"}),"."]}),(0,s.jsxs)(t.p,{children:["On the sticker image, we'll use the ",(0,s.jsx)(t.code,{children:"useAnimatedStyle()"})," hook to create a style object. This will help us to update styles using shared values when the animation happens. We'll also scale the size of the image by manipulating the ",(0,s.jsx)(t.code,{children:"width"})," and ",(0,s.jsx)(t.code,{children:"height"})," properties. The initial values of these properties are set to ",(0,s.jsx)(t.code,{children:"imageSize"}),"."]}),(0,s.jsxs)(t.p,{children:["Create an ",(0,s.jsx)(t.code,{children:"imageStyle"})," variable and add it to the ",(0,s.jsx)(t.code,{children:"EmojiSticker"})," component:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"@@@components/EmojiSticker.tsx@@@const imageStyle = useAnimatedStyle(() => {\n  return {\n    width: withSpring(scaleImage.value),\n    height: withSpring(scaleImage.value),\n  };\n});\n"})}),(0,s.jsxs)(t.p,{children:["Next, wrap the ",(0,s.jsx)(t.code,{children:"<Animated.Image>"})," component with the ",(0,s.jsx)(t.code,{children:"<GestureDetector>"})," and modify the ",(0,s.jsx)(t.code,{children:"style"})," prop on the ",(0,s.jsx)(t.code,{children:"<Animated.Image>"})," to pass the ",(0,s.jsx)(t.code,{children:"imageStyle"}),"."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"@@@components/EmojiSticker.tsx@@@import { ImageSourcePropType, View } from 'react-native';\nimport { Gesture, GestureDetector } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedStyle, useSharedValue, withSpring } from 'react-native-reanimated';\n\ntype Props = {\n  imageSize: number;\n  stickerSource: ImageSourcePropType;\n};\n\nexport default function EmojiSticker({ imageSize, stickerSource }: Props) {\n  const scaleImage = useSharedValue(imageSize);\n\n  const doubleTap = Gesture.Tap()\n    .numberOfTaps(2)\n    .onStart(() => {\n      if (scaleImage.value !== imageSize * 2) {\n        scaleImage.value = scaleImage.value * 2;\n      } else {\n        scaleImage.value = Math.round(scaleImage.value / 2);\n      }\n    });\n\n  const imageStyle = useAnimatedStyle(() => {\n    return {\n      width: withSpring(scaleImage.value),\n      height: withSpring(scaleImage.value),\n    };\n  });\n\n  return (\n    <View style={{ top: -350 }}>\n      /* @tutinfo Wrap the <CODE>Animated.Image</CODE> component with <CODE>GestureDetector</CODE>.*/ <GestureDetector gesture={doubleTap}>/* @end */\n        <Animated.Image\n          source={stickerSource}\n          resizeMode=\"contain\"\n          style={/* @tutinfo Modify the <CODE>style</CODE> prop on the <CODE>Animated.Image</CODE> to pass the <CODE>imageStyle</CODE>. */[imageStyle, { width: imageSize, height: imageSize }]/* @end */}\n        />\n      /* @tutinfo */\n      </GestureDetector>\n      /* @end */\n    </View>\n  );\n}\n"})}),(0,s.jsxs)(t.p,{children:["In the above snippet, the ",(0,s.jsx)(t.code,{children:"gesture"})," prop takes the value of the ",(0,s.jsx)(t.code,{children:"doubleTap"})," to trigger a gesture when a user double-taps the sticker image."]}),(0,s.jsx)(t.p,{children:"Let's take a look at our app on Android, iOS and the web:"}),(0,s.jsx)(r.C,{file:"tutorial/tap-gesture.mp4"}),(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["For a complete reference of the tap gesture API, see the ",(0,s.jsx)(t.a,{href:"https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture",children:"React Native Gesture Handler"})," documentation."]}),"\n"]})]}),"\n",(0,s.jsxs)(o.p,{label:"4",children:[(0,s.jsx)(t.h2,{id:"add-a-pan-gesture",children:"Add a pan gesture"}),(0,s.jsxs)(t.p,{children:["To recognize a dragging gesture on the sticker and to track its movement, we'll use a pan gesture. In the ",(0,s.jsx)(t.strong,{children:"components/EmojiSticker.tsx"}),":"]}),(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Create two new shared values: ",(0,s.jsx)(t.code,{children:"translateX"})," and ",(0,s.jsx)(t.code,{children:"translateY"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Replace the ",(0,s.jsx)(t.code,{children:"<View>"})," with the ",(0,s.jsx)(t.code,{children:"<Animated.View>"})," component."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"@@@components/EmojiSticker.tsx@@@export default function EmojiSticker({ imageSize, stickerSource }: Props) {\n  const scaleImage = useSharedValue(imageSize);\n  /* @tutinfo Add <CODE>translateX</CODE> and <CODE>translateY</CODE> shared values.*/\n  const translateX = useSharedValue(0);\n  const translateY = useSharedValue(0);\n  /* @end */\n  // ...rest of the code remains same\n\n  return (\n    /* @tutinfo Replace the <CODE>View</CODE> component with <CODE>Animated.View</CODE>. */<Animated.View style={{ top: -350 }}>/* @end */\n      <GestureDetector gesture={doubleTap}>\n        {/* ...rest of the code remains same */}\n      </GestureDetector>\n    /* @tutinfo */</Animated.View>/* @end */\n  );\n}\n"})}),(0,s.jsx)(t.p,{children:"Let's learn what the above code does:"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The translation values defined will move the sticker around the screen. Since the sticker moves along both axes, we need to track the X and Y values."}),"\n",(0,s.jsxs)(t.li,{children:["In the ",(0,s.jsx)(t.code,{children:"useSharedValue()"})," hooks, we have set both translation variables to have an initial position of ",(0,s.jsx)(t.code,{children:"0"}),". This is the sticker's initial position and a starting point. This value sets the sticker's initial position when the gesture starts."]}),"\n"]}),(0,s.jsxs)(t.p,{children:["In the previous step, we triggered the ",(0,s.jsx)(t.code,{children:"onStart()"})," callback for the tap gesture chained to the ",(0,s.jsx)(t.code,{children:"Gesture.Tap()"})," method. For the pan gesture, specify an ",(0,s.jsx)(t.code,{children:"onChange()"})," callback, which runs when the gesture is active and moving."]}),(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Create a ",(0,s.jsx)(t.code,{children:"drag"})," object to handle the pan gesture. The ",(0,s.jsx)(t.code,{children:"onChange()"})," callback accepts ",(0,s.jsx)(t.code,{children:"event"})," as a parameter. ",(0,s.jsx)(t.code,{children:"changeX"})," and ",(0,s.jsx)(t.code,{children:"changeY"})," properties hold the change in position since the last event. and update the values stored in ",(0,s.jsx)(t.code,{children:"translateX"})," and ",(0,s.jsx)(t.code,{children:"translateY"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Define the ",(0,s.jsx)(t.code,{children:"containerStyle"})," object using the ",(0,s.jsx)(t.code,{children:"useAnimatedStyle()"})," hook. It will return an array of transforms. For the ",(0,s.jsx)(t.code,{children:"<Animated.View>"})," component, we need to set the ",(0,s.jsx)(t.code,{children:"transform"})," property to the ",(0,s.jsx)(t.code,{children:"translateX"})," and ",(0,s.jsx)(t.code,{children:"translateY"})," values. This will change the sticker's position when the gesture is active."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"@@@components/EmojiSticker.tsx@@@const drag = Gesture.Pan().onChange(event => {\n  translateX.value += event.changeX;\n  translateY.value += event.changeY;\n});\n\nconst containerStyle = useAnimatedStyle(() => {\n  return {\n    transform: [\n      {\n        translateX: translateX.value,\n      },\n      {\n        translateY: translateY.value,\n      },\n    ],\n  };\n});\n"})}),(0,s.jsx)(t.p,{children:"Next, inside the JSX code:"}),(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Update the ",(0,s.jsx)(t.code,{children:"<EmojiSticker>"})," component so that the ",(0,s.jsx)(t.code,{children:"<GestureDetector>"})," component becomes the top-level component."]}),"\n",(0,s.jsxs)(t.li,{children:["Add the ",(0,s.jsx)(t.code,{children:"containerStyle"})," on the ",(0,s.jsx)(t.code,{children:"<Animated.View>"})," component to apply the transform styles."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"@@@components/EmojiSticker.tsx@@@import { Gesture, GestureDetector } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedStyle, useSharedValue, withSpring } from 'react-native-reanimated';\nimport { ImageSourcePropType } from 'react-native';\n\ntype Props = {\n  imageSize: number;\n  stickerSource: ImageSourcePropType;\n};\n\nexport default function EmojiSticker({ imageSize, stickerSource }: Props) {\n  const scaleImage = useSharedValue(imageSize);\n  const translateX = useSharedValue(0);\n  const translateY = useSharedValue(0);\n\n  const doubleTap = Gesture.Tap()\n    .numberOfTaps(2)\n    .onStart(() => {\n      if (scaleImage.value !== imageSize * 2) {\n        scaleImage.value = scaleImage.value * 2;\n      } else {\n        scaleImage.value = Math.round(scaleImage.value / 2);\n      }\n    });\n\n  const imageStyle = useAnimatedStyle(() => {\n    return {\n      width: withSpring(scaleImage.value),\n      height: withSpring(scaleImage.value),\n    };\n  });\n\n  const drag = Gesture.Pan().onChange(event => {\n    translateX.value += event.changeX;\n    translateY.value += event.changeY;\n  });\n\n  const containerStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: translateX.value,\n        },\n        {\n          translateY: translateY.value,\n        },\n      ],\n    };\n  });\n\n  return (\n    /* @tutinfo Wrap all components inside <CODE>GestureDetector</CODE>. */<GestureDetector gesture={drag}>/* @end */\n      <Animated.View style={/* @tutinfo Add <CODE>containerStyle</CODE> to the <CODE>Animated.View</CODE> style prop. */[containerStyle, { top: -350 }]/* @end */}>\n        <GestureDetector gesture={doubleTap}>\n          <Animated.Image\n            source={stickerSource}\n            resizeMode=\"contain\"\n            style={[imageStyle, { width: imageSize, height: imageSize }]}\n          />\n        </GestureDetector>\n      </Animated.View>\n    /* @tutinfo */</GestureDetector>/* @end */\n  );\n}\n"})}),(0,s.jsx)(t.p,{children:"Let's take a look at our app on Android, iOS and the web:"}),(0,s.jsx)(r.C,{file:"tutorial/pan-gesture.mp4"})]}),"\n",(0,s.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(i.s,{currentChapterIndex:5,name:"GET_STARTED",summary:"We've successfully implemented pan and tap gestures.",nextChapterDescription:"In the next chapter, we'll learn how to take a screenshot of the image and the sticker, and save it on the device's library.",nextChapterTitle:"Take a screenshot",nextChapterLink:"/tutorial/screenshot"})]})}function u(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},58674:(e,t,n)=>{"use strict";n.d(t,{r:()=>l});var s=n(37876),a=n(66028),r=n(97342),i=n(83038),o=n(75298);function l(e){let{title:t,description:n,videoId:l,time:c,className:d}=e;return(0,s.jsxs)(a.LinkBase,{openInNewTab:!0,href:`https://www.youtube.com/watch?v=${l}${c?`&t=${c}`:""}`,className:(0,a.mergeClasses)("group relative flex items-stretch overflow-hidden rounded-lg border border-default bg-default shadow-xs transition","hocus:bg-subtle hocus:shadow-sm","max-sm-gutters:flex-col","[&+hr]:!mt-6",d),"aria-label":`Watch video: ${t} (opens in new tab)`,children:[(0,s.jsxs)("div",{className:(0,a.mergeClasses)("relative flex max-w-[200px] items-center justify-center overflow-hidden border-r border-secondary bg-element","max-sm-gutters:max-w-full max-sm-gutters:border-b max-sm-gutters:border-r-0"),children:[(0,s.jsx)("img",{src:`https://i3.ytimg.com/vi/${l}/maxresdefault.jpg`,className:"aspect-video transition duration-300 group-hover:scale-105 group-focus-visible:scale-105",alt:t,"aria-label":`Video thumbnail for ${t}`}),(0,s.jsx)("div",{className:"absolute right-[calc(50%-22px)] top-[calc(50%-22px)] flex size-[44px] items-center justify-center rounded-full bg-[#000a]",role:"presentation","aria-hidden":"true",children:(0,s.jsx)(i.PlaySolidIcon,{className:"icon-lg ml-0.5 text-palette-white"})})]}),(0,s.jsxs)("div",{className:"flex flex-col justify-center gap-1 px-4 py-2",children:[(0,s.jsx)(o.d_,{className:"flex items-center gap-1.5 leading-normal",children:t}),n&&(0,s.jsx)(o.Tk,{theme:"secondary",className:"flex items-center gap-2",children:n})]}),(0,s.jsx)(r.ArrowUpRightIcon,{className:"icon-md my-auto ml-auto mr-4 shrink-0 text-icon-secondary max-sm-gutters:hidden","aria-hidden":"true"})]})}},65987:(e,t,n)=>{"use strict";n.d(t,{u:()=>l});var s=n(37876),a=n(66028),r=n(39949),i=n(97342),o=n(75298);function l(e){let{title:t,description:n,href:l,testID:c,Icon:d,imageUrl:h}=e,m=!!l?.startsWith("http"),u=m?i.ArrowUpRightIcon:r.ArrowRightIcon;return(0,s.jsxs)(a.LinkBase,{href:l,className:(0,a.mergeClasses)("group mb-3 flex flex-row justify-between rounded-md border border-solid border-default px-4 py-3 transition","hocus:bg-subtle hocus:shadow-xs"),openInNewTab:m,children:[(0,s.jsxs)("div",{className:"flex flex-row gap-4",children:[d&&(0,s.jsx)("div",{className:"flex h-9 min-w-[36px] items-center justify-center self-center rounded-md bg-element transition group-hover:bg-hover",children:(0,s.jsx)(d,{className:"icon-lg text-icon-default"})}),h&&(0,s.jsx)("img",{className:"!h-9 !w-9 self-center",src:h,alt:"Icon"}),(0,s.jsxs)("div",{className:"flex flex-col self-center",children:[(0,s.jsx)(o.M9,{children:t}),n&&(0,s.jsx)(o.Tk,{theme:"secondary",children:n})]})]}),(0,s.jsx)(u,{className:"ml-3 min-w-[20px] content-end self-center text-icon-secondary"})]})}},72486:(e,t,n)=>{"use strict";n.d(t,{C:()=>u});var s=n(37876),a=n(66028),r=n(12619),i=n(18847),o=n.n(i),l=n(14232),c=n(46924),d=n(30441);function h(e){let{src:t,alt:n,...a}=e,[r,i]=(0,l.useState)(!1);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("button",{type:"button",onClick:()=>{i(!0)},children:(0,s.jsx)("img",{src:t,alt:n,...a})}),(0,s.jsx)(c.Yf,{open:r,close:()=>{i(!1)},slides:[{src:t}],styles:{container:{backgroundColor:"rgba(0, 0, 0, .8)"}},controller:{aria:!0,closeOnBackdropClick:!0},carousel:{finite:!0},render:{buttonPrev:()=>null,buttonNext:()=>null},plugins:[d.A]})]})}n(23655);let m=o()(()=>n.e(20845).then(n.t.bind(n,20845,23)),{loadableGenerated:{webpack:()=>[20845]},ssr:!1});function u(e){let{alt:t,src:n,file:i,caption:o,controls:c,loop:d=!0,className:u,containerClassName:p}=e,[x,g]=(0,l.useState)(),j=!!i,f=(0,l.useRef)(null),v=(0,r.W)(f);return(0,s.jsxs)("figure",{className:(0,a.mergeClasses)("my-5 cursor-pointer rounded-lg py-2.5 text-center",p,!j&&"bg-subtle"),onClick:()=>{void 0!==c||x||g(!0)},children:[n?(0,s.jsx)(h,{src:n,alt:t,className:(0,a.mergeClasses)("inline rounded-md transition-opacity duration-default ease-in-out hover:opacity-80",u)}):j?(0,s.jsxs)("div",{className:"relative aspect-video overflow-hidden rounded-lg bg-palette-black",ref:f,children:[(0,s.jsx)(m,{url:`/static/videos/${i}`,className:"react-player",width:"100%",height:"100%",muted:!0,playing:v&&!!i,controls:void 0===c?x:c,playsinline:!0,loop:d}),(0,s.jsx)("div",{className:(0,a.mergeClasses)("pointer-events-none absolute inset-0 transition-opacity duration-500 max-md-gutters:hidden",v?"opacity-0":"opacity-70")})]}):null,o&&(0,s.jsx)("figcaption",{className:(0,a.mergeClasses)("mt-3.5 cursor-text px-8 py-2 text-center text-xs text-secondary",j&&"bg-transparent"),children:o})]})}},77720:(e,t,n)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorial/gestures",function(){return n(51567)}])},83038:(e,t,n)=>{"use strict";Object.defineProperty(t,Symbol.toStringTag,{value:"Module"});let s=n(14232),a=n(71894),r=function(e){let t=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(let n in e)if("default"!==n){let s=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,s.get?s:{enumerable:!0,get:()=>e[n]})}}return t.default=e,Object.freeze(t)}(s);function i({className:e,...t}){let n=a.mergeClasses("icon-md text-icon-default translate-z shrink-0",e);return r.createElement("svg",{viewBox:"0 0 24 24",fill:"currentColor",className:n,role:"img",...t},r.createElement("g",{id:"play-solid-icon"},r.createElement("path",{id:"Solid",fillRule:"evenodd",d:"M8.00625 2.80243C8.0182 2.8104 8.03019 2.81839 8.04222 2.82642L18.591 9.8589C18.8962 10.0623 19.1792 10.251 19.3965 10.4263C19.6234 10.6092 19.8908 10.8629 20.0447 11.234C20.2481 11.7245 20.2481 12.2758 20.0447 12.7663C19.8908 13.1374 19.6234 13.391 19.3965 13.574C19.1792 13.7493 18.8962 13.9379 18.591 14.1413L8.00628 21.1978C7.63319 21.4465 7.29772 21.6702 7.01305 21.8245C6.72818 21.9789 6.33717 22.1553 5.8808 22.128C5.29705 22.0932 4.75779 21.8046 4.40498 21.3382C4.12916 20.9736 4.05905 20.5504 4.02949 20.2278C3.99994 19.9053 3.99997 19.5021 4 19.0537L4 4.98975C4 4.97529 4 4.96087 4 4.9465C3.99997 4.49811 3.99994 4.09491 4.02949 3.77249C4.05905 3.44983 4.12916 3.02663 4.40498 2.66202C4.75779 2.19565 5.29705 1.90705 5.8808 1.87219C6.33717 1.84494 6.72818 2.02135 7.01305 2.17573C7.29771 2.33 7.63317 2.55368 8.00625 2.80243Z",clipRule:"evenodd"})))}i.displayName="PlaySolidIcon",t.PlaySolidIcon=i},87249:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var s=n(37876),a=n(66028),r=n(75298);let i=e=>{let{children:t,label:n}=e;return(0,s.jsxs)("div",{className:"mb-8 mt-6 flex gap-4",children:[(0,s.jsx)(r.ZS,{theme:"secondary",className:(0,a.mergeClasses)("mt-1 flex h-7 min-w-[28px] items-center justify-center rounded-full bg-element",n.length>=3&&"!text-xs"),children:n}),(0,s.jsx)("div",{className:"w-full max-w-[calc(100%-44px)] pt-1.5 prose-h2:!-mt-1.5 prose-h3:!-mt-1 prose-h4:!-mt-px [&>*:last-child]:!mb-0",children:"string"==typeof t?(0,s.jsx)(r.P,{children:t}):t})]})}}},e=>{e.O(0,[19243,90636,46593,38792],()=>e(e.s=77720)),_N_E=e.O()}]);