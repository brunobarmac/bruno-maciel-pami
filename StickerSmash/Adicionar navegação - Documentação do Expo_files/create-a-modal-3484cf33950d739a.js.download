try{!function(){var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},n=(new e.Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]="c8898b3b-631f-4d19-9e58-c9831898c212",e._sentryDebugIdIdentifier="sentry-dbid-c8898b3b-631f-4d19-9e58-c9831898c212")}()}catch(e){}(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8243],{30373:(e,n,t)=>{"use strict";function s(e,n,t){if(e instanceof EventTarget)return[e];if("string"==typeof e){let s=document;n&&(s=n.current);let o=t?.[e]??s.querySelectorAll(e);return o?Array.from(o):[]}return Array.from(e)}t.d(n,{K:()=>s})},38955:(e,n,t)=>{"use strict";t.d(n,{s:()=>p});var s=t(37876),o=t(66028),i=t(41711),r=t(84437),a=t(65987),l=t(75298),c=t(15294);function d(e){let{size:n="md",className:t}=e;return(0,s.jsx)("div",{className:(0,o.mergeClasses)("flex items-center justify-center rounded-full border-2 border-success bg-success","md"===n&&"size-20","sm"===n&&"size-15",t),children:(0,s.jsx)(c.CheckIcon,{className:(0,o.mergeClasses)("text-success","md"===n&&"size-10","sm"===n&&"size-[30px]")})})}var m=t(8051);function p(e){let{currentChapterIndex:n,name:t,summary:c,nextChapterTitle:p,nextChapterDescription:h,nextChapterLink:u}=e,{chapters:x,setChapters:g,getStartedChapters:f,setGetStartedChapters:j}=(0,r.N)(),y="GET_STARTED"===t,b=y?f[n]:x[n];return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("div",{className:"mx-auto flex w-full flex-col gap-4 rounded-lg border-2 border-palette-gray4 px-4 py-5",children:[(0,s.jsx)(d,{size:"sm",className:(0,o.mergeClasses)("mx-auto flex items-center justify-center grayscale transition duration-300",b.completed&&"border-palette-green5 grayscale-0")}),(0,s.jsxs)("div",{className:"flex flex-col items-center justify-center gap-2",children:[(0,s.jsxs)("p",{className:"flex items-center text-center font-semibold text-default heading-lg",children:[(0,s.jsx)(i.BookOpen02Icon,{className:"mr-2 size-6 text-icon-secondary max-md-gutters:hidden"})," ",b.title]}),(0,s.jsx)("p",{className:"max-w-[60ch] pb-2 text-center leading-normal text-secondary",children:c})]}),(0,s.jsx)("div",{className:"flex items-center justify-center",children:(0,s.jsx)(m.S,{id:`chapter-${n}`,checked:b.completed,label:b.completed?"Mark this chapter as unread":"Mark this chapter as read",onChange:y?()=>{b.completed?j(f.map((e,t)=>t===n?{...e,completed:!1}:e)):j(f.map((e,t)=>t===n?{...e,completed:!0}:e))}:()=>{b.completed?g(x.map((e,t)=>t===n?{...e,completed:!1}:e)):g(x.map((e,t)=>t===n?{...e,completed:!0}:e))}})})]}),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.P,{className:"my-4",children:h}),(0,s.jsx)(a.u,{href:u,title:`Next: ${p}`,Icon:i.BookOpen02Icon})]})]})}},42893:(e,n,t)=>{"use strict";t.r(n),t.d(n,{__N_SSG:()=>c,default:()=>h,headings:()=>m,meta:()=>d});var s=t(37876),o=t(91668),i=t(72486),r=t(38955),a=t(87249),l=t(58674),c=!0;let d={modificationDate:"September 02, 2025",title:"Create a modal",description:"In this tutorial, learn how to create a React Native modal to select an image.",hasVideoLink:!0},m=[{depth:2,type:"text",title:"Declare a state variable to show buttons"},{depth:2,type:"text",title:"Add buttons"},{depth:2,type:"text",title:"Create an emoji picker modal"},{depth:2,type:"text",title:"Display a list of emoji"},{depth:2,type:"text",title:"Display the selected emoji"},{depth:2,type:"text",title:"Summary"}];function p(e){let n={a:"a",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["React Native provides a ",(0,s.jsxs)(n.a,{href:"https://reactnative.dev/docs/modal",children:[(0,s.jsx)(n.code,{children:"<Modal>"})," component"]})," that presents content above the rest of your app. In general, modals are used to draw a user's attention toward critical information or guide them to take action. For example, in the ",(0,s.jsx)(n.a,{href:"/../../../../../../../tutorial/build-a-screen/#step-7-enhance-the-reusable-button-component",children:"third chapter"}),", after pressing the button, we used ",(0,s.jsx)(n.code,{children:"alert()"})," to display some placeholder text. That's how a modal component displays an overlay."]}),"\n",(0,s.jsx)(n.p,{children:"In this chapter, we'll create a modal that shows an emoji picker list."}),"\n",(0,s.jsx)(l.r,{videoId:"HRAMzrBwVeo",title:"Watch: Creating a modal in your universal Expo app"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(a.p,{label:"1",children:[(0,s.jsx)(n.h2,{id:"declare-a-state-variable-to-show-buttons",children:"Declare a state variable to show buttons"}),(0,s.jsx)(n.p,{children:"Before implementing the modal, we are going to add three new buttons. These buttons are visible after the user picks an image from the media library or uses the placeholder image. One of these buttons will trigger the emoji picker modal."}),(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.strong,{children:"app/(tabs)/index.tsx"}),":"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Declare a boolean state variable, ",(0,s.jsx)(n.code,{children:"showAppOptions"}),", to show or hide the buttons that open the modal, alongside a few other options. When the app screen loads, we'll set it to ",(0,s.jsx)(n.code,{children:"false"})," so the options are not shown before picking an image. When the user picks an image or uses the placeholder image, we'll set it to ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Update the ",(0,s.jsx)(n.code,{children:"pickImageAsync()"})," function to set the value of ",(0,s.jsx)(n.code,{children:"showAppOptions"})," to ",(0,s.jsx)(n.code,{children:"true"})," after the user picks an image."]}),"\n",(0,s.jsxs)(n.li,{children:["Update the button with no theme by adding an ",(0,s.jsx)(n.code,{children:"onPress"})," prop with the following value."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"@@@app/(tabs)/index.tsx@@@import { View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useState } from 'react';\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\n  /* @tutinfo Create a state variable inside the <CODE>Index</CODE> component. */\n  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);\n  /* @end */\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      /* @tutinfo After selecting the image, set the app options to true. */\n      setShowAppOptions(true);\n      /* @end */\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n      </View>\n      /* @tutinfo Based on the value of <CODE>showAppOptions</CODE>, the buttons will be displayed. Also, move the existing buttons in the conditional operator block. */\n      {showAppOptions ? (\n        <View />\n      /* @end */\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          /* @tutinfo Replace the <CODE>alert()</CODE> with the <CODE>onPress</CODE>.*/\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n          /* @end */\n        </View>\n      /* @tutinfo */)}/* @end */\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n});\n"})}),(0,s.jsxs)(n.p,{children:["In the above snippet, we're rendering the ",(0,s.jsx)(n.code,{children:"Button"})," component based on the value of ",(0,s.jsx)(n.code,{children:"showAppOptions"})," and moving the buttons in the ternary operator block. When the value of ",(0,s.jsx)(n.code,{children:"showAppOptions"})," is ",(0,s.jsx)(n.code,{children:"true"}),", render an empty ",(0,s.jsx)(n.code,{children:"<View>"})," component. We'll address this state in the next step."]}),(0,s.jsxs)(n.p,{children:["Now, we can remove the ",(0,s.jsx)(n.code,{children:"alert"})," on the ",(0,s.jsx)(n.code,{children:"Button"})," component and update the ",(0,s.jsx)(n.code,{children:"onPress"})," prop when rendering the second button in the ",(0,s.jsx)(n.strong,{children:"components/Button.tsx"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"@@@components/Button.tsx@@@<Pressable style={styles.button} /* @tutinfo Replace the <CODE>alert()</CODE> with the <CODE>onPress</CODE>.*/ onPress={onPress}/* @end */>\n"})})]}),"\n",(0,s.jsxs)(a.p,{label:"2",children:[(0,s.jsx)(n.h2,{id:"add-buttons",children:"Add buttons"}),(0,s.jsx)(n.p,{children:"Let's break down the layout of the option buttons we'll implement in this chapter. The design looks like this:"}),(0,s.jsx)(i.C,{alt:"Break down of the layout of the buttons row.",src:"/static/images/tutorial/buttons-layout.jpg",className:"max-w-[480px]"}),(0,s.jsxs)(n.p,{children:["It contains a parent ",(0,s.jsx)(n.code,{children:"<View>"})," with three buttons aligned in a row. The button in the middle with the plus icon (+) will open the modal and is styled differently than the other two buttons."]}),(0,s.jsxs)(n.p,{children:["Inside the ",(0,s.jsx)(n.strong,{children:"components"})," directory, create a new ",(0,s.jsx)(n.strong,{children:"CircleButton.tsx"})," file with the following code:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"@@@components/CircleButton.tsx@@@import { View, Pressable, StyleSheet } from 'react-native';\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\n\ntype Props = {\n  onPress: () => void;\n};\n\nexport default function CircleButton({ onPress }: Props) {\n  return (\n    <View style={styles.circleButtonContainer}>\n      <Pressable style={styles.circleButton} onPress={onPress}>\n        <MaterialIcons name=\"add\" size={38} color=\"#25292e\" />\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  circleButtonContainer: {\n    width: 84,\n    height: 84,\n    marginHorizontal: 60,\n    borderWidth: 4,\n    borderColor: '#ffd33d',\n    borderRadius: 42,\n    padding: 3,\n  },\n  circleButton: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 42,\n    backgroundColor: '#fff',\n  },\n});\n"})}),(0,s.jsxs)(n.p,{children:["To render the plus icon, this button uses the ",(0,s.jsx)(n.code,{children:"<MaterialIcons>"})," icon set from the ",(0,s.jsx)(n.code,{children:"@expo/vector-icons"})," library."]}),(0,s.jsxs)(n.p,{children:["The other two buttons also use ",(0,s.jsx)(n.code,{children:"<MaterialIcons>"})," to display vertically aligned text labels and icons. Create a file named ",(0,s.jsx)(n.strong,{children:"IconButton.tsx"})," inside the ",(0,s.jsx)(n.strong,{children:"components"})," directory. This component accepts three props:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"icon"}),": the name corresponding to the ",(0,s.jsx)(n.code,{children:"MaterialIcons"})," library icon."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"label"}),": the text label displayed on the button."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onPress"}),": this function invokes when the user presses the button."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"@@@components/IconButton.tsx@@@import { Pressable, StyleSheet, Text } from 'react-native';\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\n\ntype Props = {\n  icon: keyof typeof MaterialIcons.glyphMap;\n  label: string;\n  onPress: () => void;\n};\n\nexport default function IconButton({ icon, label, onPress }: Props) {\n  return (\n    <Pressable style={styles.iconButton} onPress={onPress}>\n      <MaterialIcons name={icon} size={24} color=\"#fff\" />\n      <Text style={styles.iconButtonLabel}>{label}</Text>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  iconButton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButtonLabel: {\n    color: '#fff',\n    marginTop: 12,\n  },\n});\n"})}),(0,s.jsxs)(n.p,{children:["Inside ",(0,s.jsx)(n.strong,{children:"app/(tabs)/index.tsx"}),":"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Import the ",(0,s.jsx)(n.code,{children:"CircleButton"})," and ",(0,s.jsx)(n.code,{children:"IconButton"})," components to display them."]}),"\n",(0,s.jsxs)(n.li,{children:["Add three placeholder functions for these buttons. The ",(0,s.jsx)(n.code,{children:"onReset()"})," function invokes when the user presses the reset button, causing the image picker button to appear again. We'll add the functionality for the other two functions later."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"@@@app/(tabs)/index.tsx@@@import { View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useState } from 'react';\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\n/* @tutinfo Import <CODE>IconButton</CODE> and <CODE>CircleButton</CODE> components.*/\nimport IconButton from '@/components/IconButton';\nimport CircleButton from '@/components/CircleButton';\n/* @end */\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\n  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      setShowAppOptions(true);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  /* @tutinfo Add placeholder functions that we will add logic for in the next sections. */\n  const onReset = () => {\n    setShowAppOptions(false);\n  };\n\n  const onAddSticker = () => {\n    // we will implement this later\n  };\n\n  const onSaveImageAsync = async () => {\n    // we will implement this later\n  };\n  /* @end */\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n      </View>\n      {showAppOptions ? (\n        /* @tutinfo Replace empty <CODE>View</CODE> component with this snippet to display App option buttons. */\n        <View style={styles.optionsContainer}>\n          <View style={styles.optionsRow}>\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\n            <CircleButton onPress={onAddSticker} />\n            <IconButton icon=\"save-alt\" label=\"Save\" onPress={onSaveImageAsync} />\n          </View>\n        </View>\n        /* @end */\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n  /* @tutinfo Add styles for the new <CODE>View</CODE> components. */\n  optionsContainer: {\n    position: 'absolute',\n    bottom: 80,\n  },\n  optionsRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n  /* @end */\n});\n"})}),(0,s.jsx)(n.p,{children:"Let's take a look at our app on Android, iOS and the web:"}),(0,s.jsx)(i.C,{alt:"Button options displayed after a image is selected.",src:"/static/images/tutorial/button-options.png",className:"max-w-[720px]"})]}),"\n",(0,s.jsxs)(a.p,{label:"3",children:[(0,s.jsx)(n.h2,{id:"create-an-emoji-picker-modal",children:"Create an emoji picker modal"}),(0,s.jsxs)(n.p,{children:["The modal allows the user to choose an emoji from a list of available emoji. Create an ",(0,s.jsx)(n.strong,{children:"EmojiPicker.tsx"})," file inside the ",(0,s.jsx)(n.strong,{children:"components"})," directory. This component accepts three props:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isVisible"}),": a boolean to determine the state of the modal's visibility."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onClose"}),": a function to close the modal."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"children"}),": used later to display a list of emoji."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"@@@components/EmojiPicker.tsx|collapseHeight=430@@@import { Modal, View, Text, Pressable, StyleSheet } from 'react-native';\nimport { PropsWithChildren } from 'react';\nimport MaterialIcons from '@expo/vector-icons/MaterialIcons';\n\ntype Props = PropsWithChildren<{\n  isVisible: boolean;\n  onClose: () => void;\n}>;\n\nexport default function EmojiPicker({ isVisible, children, onClose }: Props) {\n  return (\n    <View>\n    <Modal animationType=\"slide\" transparent={true} visible={isVisible}>\n      <View style={styles.modalContent}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.title}>Choose a sticker</Text>\n          <Pressable onPress={onClose}>\n            <MaterialIcons name=\"close\" color=\"#fff\" size={22} />\n          </Pressable>\n        </View>\n        {children}\n      </View>\n    </Modal>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  modalContent: {\n    height: '25%',\n    width: '100%',\n    backgroundColor: '#25292e',\n    borderTopRightRadius: 18,\n    borderTopLeftRadius: 18,\n    position: 'absolute',\n    bottom: 0,\n  },\n  titleContainer: {\n    height: '16%',\n    backgroundColor: '#464C55',\n    borderTopRightRadius: 10,\n    borderTopLeftRadius: 10,\n    paddingHorizontal: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  title: {\n    color: '#fff',\n    fontSize: 16,\n  },\n});\n"})}),(0,s.jsx)(n.p,{children:"Let's learn what the above code does:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"<Modal>"})," component displays a title and a close button."]}),"\n",(0,s.jsxs)(n.li,{children:["Its ",(0,s.jsx)(n.code,{children:"visible"})," prop takes the value of ",(0,s.jsx)(n.code,{children:"isVisible"})," and controls whether the modal is open or closed."]}),"\n",(0,s.jsxs)(n.li,{children:["Its ",(0,s.jsx)(n.code,{children:"transparent"})," prop is a boolean value, which determines whether the modal fills the entire view."]}),"\n",(0,s.jsxs)(n.li,{children:["Its ",(0,s.jsx)(n.code,{children:"animationType"})," prop determines how it enters and leaves the screen. In this case, it is sliding from the bottom of the screen."]}),"\n",(0,s.jsxs)(n.li,{children:["Lastly, the ",(0,s.jsx)(n.code,{children:"<EmojiPicker>"})," invokes the ",(0,s.jsx)(n.code,{children:"onClose"})," prop when the user presses the close ",(0,s.jsx)(n.code,{children:"<Pressable>"}),"."]}),"\n"]}),(0,s.jsxs)(n.p,{children:["Now, let's modify the ",(0,s.jsx)(n.strong,{children:"app/(tabs)/index.tsx"}),":"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Import the ",(0,s.jsx)(n.code,{children:"<EmojiPicker>"})," component."]}),"\n",(0,s.jsxs)(n.li,{children:["Create an ",(0,s.jsx)(n.code,{children:"isModalVisible"})," state variable with the ",(0,s.jsx)(n.code,{children:"useState"})," hook. Its default value is ",(0,s.jsx)(n.code,{children:"false"}),", which hides the modal until the user presses the button to open it."]}),"\n",(0,s.jsxs)(n.li,{children:["Replace the comment in the ",(0,s.jsx)(n.code,{children:"onAddSticker()"})," function to update the ",(0,s.jsx)(n.code,{children:"isModalVisible"})," variable to ",(0,s.jsx)(n.code,{children:"true"})," when the user presses the button. This will open the emoji picker."]}),"\n",(0,s.jsxs)(n.li,{children:["Create the ",(0,s.jsx)(n.code,{children:"onModalClose()"})," function to update the ",(0,s.jsx)(n.code,{children:"isModalVisible"})," state variable."]}),"\n",(0,s.jsxs)(n.li,{children:["Place the ",(0,s.jsx)(n.code,{children:"<EmojiPicker>"})," component at the bottom of the ",(0,s.jsx)(n.code,{children:"Index"})," component."]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"@@@app/(tabs)/index.tsx@@@import { View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useState } from 'react';\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\nimport IconButton from '@/components/IconButton';\nimport CircleButton from '@/components/CircleButton';\n/* @tutinfo import the <CODE>EmojiPicker</CODE> component. */\nimport EmojiPicker from '@/components/EmojiPicker';\n/* @end */\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\n  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);\n  /* @tutinfo Create a state variable. */\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\n  /* @end */\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      setShowAppOptions(true);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  const onReset = () => {\n    setShowAppOptions(false);\n  };\n\n  /* @tutinfo Update functions to control the modal's visibility.*/\n  const onAddSticker = () => {\n    setIsModalVisible(true);\n  };\n\n  const onModalClose = () => {\n    setIsModalVisible(false);\n  };\n  /* @end */\n\n  const onSaveImageAsync = async () => {\n    // we will implement this later\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n      </View>\n      {showAppOptions ? (\n        <View style={styles.optionsContainer}>\n          <View style={styles.optionsRow}>\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\n            <CircleButton onPress={onAddSticker} />\n            <IconButton icon=\"save-alt\" label=\"Save\" onPress={onSaveImageAsync} />\n          </View>\n        </View>\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n        </View>\n      )}\n      /* @tutinfo Render the <CODE>EmojiPicker</CODE> component at the bottom of the <CODE>Index</CODE> component. */\n      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>\n        {/* Emoji list component will go here */}\n      </EmojiPicker>\n      /* @end */\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n  optionsContainer: {\n    position: 'absolute',\n    bottom: 80,\n  },\n  optionsRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n});\n"})}),(0,s.jsx)(n.p,{children:"Here is the result after this step:"}),(0,s.jsx)(i.C,{alt:"A modal working on all platforms",src:"/static/images/tutorial/modal-creation.png",className:"max-w-[720px]"})]}),"\n",(0,s.jsxs)(a.p,{label:"4",children:[(0,s.jsx)(n.h2,{id:"display-a-list-of-emoji",children:"Display a list of emoji"}),(0,s.jsxs)(n.p,{children:["Let's add a horizontal list of emoji in the modal's content. We'll use the ",(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/flatlist",children:(0,s.jsx)(n.code,{children:"<FlatList>"})})," component from React Native for it."]}),(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.strong,{children:"EmojiList.tsx"})," file inside the ",(0,s.jsx)(n.strong,{children:"components"})," directory and add the following code:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"@@@components/EmojiList.tsx@@@import { useState } from 'react';\nimport { ImageSourcePropType, StyleSheet, FlatList, Platform, Pressable } from 'react-native';\nimport { Image } from 'expo-image';\n\ntype Props = {\n  onSelect: (image: ImageSourcePropType) => void;\n  onCloseModal: () => void;\n};\n\nexport default function EmojiList({ onSelect, onCloseModal }: Props) {\n  const [emoji] = useState<ImageSourcePropType[]>([\n    require(\"../assets/images/emoji1.png\"),\n    require(\"../assets/images/emoji2.png\"),\n    require(\"../assets/images/emoji3.png\"),\n    require(\"../assets/images/emoji4.png\"),\n    require(\"../assets/images/emoji5.png\"),\n    require(\"../assets/images/emoji6.png\"),\n  ]);\n\n  return (\n    <FlatList\n      horizontal\n      showsHorizontalScrollIndicator={Platform.OS === 'web'}\n      data={emoji}\n      contentContainerStyle={styles.listContainer}\n      renderItem={({ item, index }) => (\n        <Pressable\n          onPress={() => {\n            onSelect(item);\n            onCloseModal();\n          }}>\n          <Image source={item} key={index} style={styles.image} />\n        </Pressable>\n      )}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  listContainer: {\n    borderTopRightRadius: 10,\n    borderTopLeftRadius: 10,\n    paddingHorizontal: 20,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  image: {\n    width: 100,\n    height: 100,\n    marginRight: 20,\n  },\n});\n"})}),(0,s.jsx)(n.p,{children:"Let's learn what the above code does:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"<FlatList>"})," component above renders all the emoji images using the ",(0,s.jsx)(n.code,{children:"Image"})," component, wrapped by a ",(0,s.jsx)(n.code,{children:"<Pressable>"}),". Later, we will improve it so that the user can tap an emoji on the screen to make it appear as a sticker on the image."]}),"\n",(0,s.jsxs)(n.li,{children:["It also takes an array of items provided by the ",(0,s.jsx)(n.code,{children:"emoji"})," array variable as the value of the ",(0,s.jsx)(n.code,{children:"data"})," prop. The ",(0,s.jsx)(n.code,{children:"renderItem"})," prop takes the item from the ",(0,s.jsx)(n.code,{children:"data"})," and returns the item in the list. Finally, we added ",(0,s.jsx)(n.code,{children:"Image"})," and the ",(0,s.jsx)(n.code,{children:"<Pressable>"})," components to display this item."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"horizontal"})," prop renders the list horizontally instead of vertically. The ",(0,s.jsx)(n.code,{children:"showsHorizontalScrollIndicator"})," uses React Native's ",(0,s.jsx)(n.code,{children:"Platform"})," module to check the value and display the horizontal scroll bar on web."]}),"\n"]}),(0,s.jsxs)(n.p,{children:["Now, update the ",(0,s.jsx)(n.strong,{children:"app/(tabs)/index.tsx"})," to import the ",(0,s.jsx)(n.code,{children:"<EmojiList>"})," component and replace the comments inside the ",(0,s.jsx)(n.code,{children:"<EmojiPicker>"})," component with the following code snippet:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"@@@app/(tabs)/index.tsx|collapseHeight=440@@@import { ImageSourcePropType, View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useState } from 'react';\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\nimport IconButton from '@/components/IconButton';\nimport CircleButton from '@/components/CircleButton';\nimport EmojiPicker from '@/components/EmojiPicker';\n/* @tutinfo Import the <CODE>EmojiList</CODE> component. */\nimport EmojiList from '@/components/EmojiList';\n/* @end */\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\n  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\n  /* @tutinfo Define a state variable. */\n  const [pickedEmoji, setPickedEmoji] = useState<ImageSourcePropType | undefined>(undefined);\n  /* @end */\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      setShowAppOptions(true);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  const onReset = () => {\n    setShowAppOptions(false);\n  };\n\n  const onAddSticker = () => {\n    setIsModalVisible(true);\n  };\n\n  const onModalClose = () => {\n    setIsModalVisible(false);\n  };\n\n  const onSaveImageAsync = async () => {\n    // we will implement this later\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n      </View>\n      {showAppOptions ? (\n        <View style={styles.optionsContainer}>\n          <View style={styles.optionsRow}>\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\n            <CircleButton onPress={onAddSticker} />\n            <IconButton icon=\"save-alt\" label=\"Save\" onPress={onSaveImageAsync} />\n          </View>\n        </View>\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n        </View>\n      )}\n      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>\n        /* @tutinfo Render the <CODE>EmojiList</CODE> component inside the <CODE>EmojiPicker</CODE> component. */\n        <EmojiList onSelect={setPickedEmoji} onCloseModal={onModalClose} />\n        /* @end */\n      </EmojiPicker>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n  optionsContainer: {\n    position: 'absolute',\n    bottom: 80,\n  },\n  optionsRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n});\n"})}),(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"EmojiList"})," component, the ",(0,s.jsx)(n.code,{children:"onSelect"})," prop selects the emoji and after selecting it, the ",(0,s.jsx)(n.code,{children:"onCloseModal"})," closes the modal."]}),(0,s.jsx)(n.p,{children:"Let's take a look at our app on Android, iOS and the web:"}),(0,s.jsx)(i.C,{alt:"Emoji list displayed on all platforms",src:"/static/images/tutorial/emoji-picker.png",className:"max-w-[720px]"})]}),"\n",(0,s.jsxs)(a.p,{label:"5",children:[(0,s.jsx)(n.h2,{id:"display-the-selected-emoji",children:"Display the selected emoji"}),(0,s.jsxs)(n.p,{children:["Now, we'll put the emoji sticker on the image. Create a new file in the ",(0,s.jsx)(n.strong,{children:"components"})," directory and call it ",(0,s.jsx)(n.strong,{children:"EmojiSticker.tsx"}),". Then, add the following code:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"@@@components/EmojiSticker.tsx|collapseHeight=300@@@import { ImageSourcePropType, View } from 'react-native';\nimport { Image } from 'expo-image';\n\ntype Props = {\n  imageSize: number;\n  stickerSource: ImageSourcePropType;\n};\n\nexport default function EmojiSticker({ imageSize, stickerSource }: Props) {\n  return (\n    <View style={{ top: -350 }}>\n      <Image source={stickerSource} style={{ width: imageSize, height: imageSize }} />\n    </View>\n  );\n}\n"})}),(0,s.jsx)(n.p,{children:"This component receives two props:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"imageSize"}),": a value defined inside the ",(0,s.jsx)(n.code,{children:"Index"})," component. We will use this value in the next chapter to scale the image's size when tapped."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stickerSource"}),": the source of the selected emoji image."]}),"\n"]}),(0,s.jsxs)(n.p,{children:["Import this component in the ",(0,s.jsx)(n.strong,{children:"app/(tabs)/index.tsx"})," file and update the ",(0,s.jsx)(n.code,{children:"Index"})," component to display the emoji sticker on the image. We'll check if the ",(0,s.jsx)(n.code,{children:"pickedEmoji"})," state is not ",(0,s.jsx)(n.code,{children:"undefined"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"@@@app/(tabs)/index.tsx@@@import { ImageSourcePropType, View, StyleSheet } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { useState } from 'react';\n\n\nimport Button from '@/components/Button';\nimport ImageViewer from '@/components/ImageViewer';\nimport IconButton from '@/components/IconButton';\nimport CircleButton from '@/components/CircleButton';\nimport EmojiPicker from '@/components/EmojiPicker';\nimport EmojiList from '@/components/EmojiList';\n/* @tutinfo Import the <CODE>EmojiSticker</CODE> component. */\nimport EmojiSticker from '@/components/EmojiSticker';\n/* @end */\n\nconst PlaceholderImage = require('@/assets/images/background-image.png');\n\nexport default function Index() {\n  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);\n  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\n  const [pickedEmoji, setPickedEmoji] = useState<ImageSourcePropType | undefined>(undefined);\n\n\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ['images'],\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      setShowAppOptions(true);\n    } else {\n      alert('You did not select any image.');\n    }\n  };\n\n  const onReset = () => {\n    setShowAppOptions(false);\n  };\n\n  const onAddSticker = () => {\n    setIsModalVisible(true);\n  };\n\n  const onModalClose = () => {\n    setIsModalVisible(false);\n  };\n\n  const onSaveImageAsync = async () => {\n    // we will implement this later\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.imageContainer}>\n        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />\n        /* @tutinfo Add this line to display the emoji sticker on the image. */\n        {pickedEmoji && <EmojiSticker imageSize={40} stickerSource={pickedEmoji} />}\n        /* @end */\n      </View>\n      {showAppOptions ? (\n        <View style={styles.optionsContainer}>\n          <View style={styles.optionsRow}>\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\n            <CircleButton onPress={onAddSticker} />\n            <IconButton icon=\"save-alt\" label=\"Save\" onPress={onSaveImageAsync} />\n          </View>\n        </View>\n      ) : (\n        <View style={styles.footerContainer}>\n          <Button theme=\"primary\" label=\"Choose a photo\" onPress={pickImageAsync} />\n          <Button label=\"Use this photo\" onPress={() => setShowAppOptions(true)} />\n        </View>\n      )}\n      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>\n        <EmojiList onSelect={setPickedEmoji} onCloseModal={onModalClose} />\n      </EmojiPicker>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#25292e',\n    alignItems: 'center',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: 'center',\n  },\n  optionsContainer: {\n    position: 'absolute',\n    bottom: 80,\n  },\n  optionsRow: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n});\n"})}),(0,s.jsx)(n.p,{children:"Let's take a look at our app on Android, iOS and the web:"}),(0,s.jsx)(i.C,{file:"tutorial/select-emoji.mp4"})]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(r.s,{currentChapterIndex:4,name:"GET_STARTED",summary:"We've successfully created the emoji picker modal and implemented the logic to select an emoji and display it over the image.",nextChapterDescription:"In the next chapter, let's add user interactions with gestures to drag the emoji and scale the size by tapping it.",nextChapterTitle:"Add gestures",nextChapterLink:"/tutorial/gestures"})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},58674:(e,n,t)=>{"use strict";t.d(n,{r:()=>l});var s=t(37876),o=t(66028),i=t(97342),r=t(83038),a=t(75298);function l(e){let{title:n,description:t,videoId:l,time:c,className:d}=e;return(0,s.jsxs)(o.LinkBase,{openInNewTab:!0,href:`https://www.youtube.com/watch?v=${l}${c?`&t=${c}`:""}`,className:(0,o.mergeClasses)("group relative flex items-stretch overflow-hidden rounded-lg border border-default bg-default shadow-xs transition","hocus:bg-subtle hocus:shadow-sm","max-sm-gutters:flex-col","[&+hr]:!mt-6",d),"aria-label":`Watch video: ${n} (opens in new tab)`,children:[(0,s.jsxs)("div",{className:(0,o.mergeClasses)("relative flex max-w-[200px] items-center justify-center overflow-hidden border-r border-secondary bg-element","max-sm-gutters:max-w-full max-sm-gutters:border-b max-sm-gutters:border-r-0"),children:[(0,s.jsx)("img",{src:`https://i3.ytimg.com/vi/${l}/maxresdefault.jpg`,className:"aspect-video transition duration-300 group-hover:scale-105 group-focus-visible:scale-105",alt:n,"aria-label":`Video thumbnail for ${n}`}),(0,s.jsx)("div",{className:"absolute right-[calc(50%-22px)] top-[calc(50%-22px)] flex size-[44px] items-center justify-center rounded-full bg-[#000a]",role:"presentation","aria-hidden":"true",children:(0,s.jsx)(r.PlaySolidIcon,{className:"icon-lg ml-0.5 text-palette-white"})})]}),(0,s.jsxs)("div",{className:"flex flex-col justify-center gap-1 px-4 py-2",children:[(0,s.jsx)(a.d_,{className:"flex items-center gap-1.5 leading-normal",children:n}),t&&(0,s.jsx)(a.Tk,{theme:"secondary",className:"flex items-center gap-2",children:t})]}),(0,s.jsx)(i.ArrowUpRightIcon,{className:"icon-md my-auto ml-auto mr-4 shrink-0 text-icon-secondary max-sm-gutters:hidden","aria-hidden":"true"})]})}},62272:(e,n,t)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/tutorial/create-a-modal",function(){return t(42893)}])},65987:(e,n,t)=>{"use strict";t.d(n,{u:()=>l});var s=t(37876),o=t(66028),i=t(39949),r=t(97342),a=t(75298);function l(e){let{title:n,description:t,href:l,testID:c,Icon:d,imageUrl:m}=e,p=!!l?.startsWith("http"),h=p?r.ArrowUpRightIcon:i.ArrowRightIcon;return(0,s.jsxs)(o.LinkBase,{href:l,className:(0,o.mergeClasses)("group mb-3 flex flex-row justify-between rounded-md border border-solid border-default px-4 py-3 transition","hocus:bg-subtle hocus:shadow-xs"),openInNewTab:p,children:[(0,s.jsxs)("div",{className:"flex flex-row gap-4",children:[d&&(0,s.jsx)("div",{className:"flex h-9 min-w-[36px] items-center justify-center self-center rounded-md bg-element transition group-hover:bg-hover",children:(0,s.jsx)(d,{className:"icon-lg text-icon-default"})}),m&&(0,s.jsx)("img",{className:"!h-9 !w-9 self-center",src:m,alt:"Icon"}),(0,s.jsxs)("div",{className:"flex flex-col self-center",children:[(0,s.jsx)(a.M9,{children:n}),t&&(0,s.jsx)(a.Tk,{theme:"secondary",children:t})]})]}),(0,s.jsx)(h,{className:"ml-3 min-w-[20px] content-end self-center text-icon-secondary"})]})}},72486:(e,n,t)=>{"use strict";t.d(n,{C:()=>h});var s=t(37876),o=t(66028),i=t(12619),r=t(18847),a=t.n(r),l=t(14232),c=t(46924),d=t(30441);function m(e){let{src:n,alt:t,...o}=e,[i,r]=(0,l.useState)(!1);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("button",{type:"button",onClick:()=>{r(!0)},children:(0,s.jsx)("img",{src:n,alt:t,...o})}),(0,s.jsx)(c.Yf,{open:i,close:()=>{r(!1)},slides:[{src:n}],styles:{container:{backgroundColor:"rgba(0, 0, 0, .8)"}},controller:{aria:!0,closeOnBackdropClick:!0},carousel:{finite:!0},render:{buttonPrev:()=>null,buttonNext:()=>null},plugins:[d.A]})]})}t(23655);let p=a()(()=>t.e(20845).then(t.t.bind(t,20845,23)),{loadableGenerated:{webpack:()=>[20845]},ssr:!1});function h(e){let{alt:n,src:t,file:r,caption:a,controls:c,loop:d=!0,className:h,containerClassName:u}=e,[x,g]=(0,l.useState)(),f=!!r,j=(0,l.useRef)(null),y=(0,i.W)(j);return(0,s.jsxs)("figure",{className:(0,o.mergeClasses)("my-5 cursor-pointer rounded-lg py-2.5 text-center",u,!f&&"bg-subtle"),onClick:()=>{void 0!==c||x||g(!0)},children:[t?(0,s.jsx)(m,{src:t,alt:n,className:(0,o.mergeClasses)("inline rounded-md transition-opacity duration-default ease-in-out hover:opacity-80",h)}):f?(0,s.jsxs)("div",{className:"relative aspect-video overflow-hidden rounded-lg bg-palette-black",ref:j,children:[(0,s.jsx)(p,{url:`/static/videos/${r}`,className:"react-player",width:"100%",height:"100%",muted:!0,playing:y&&!!r,controls:void 0===c?x:c,playsinline:!0,loop:d}),(0,s.jsx)("div",{className:(0,o.mergeClasses)("pointer-events-none absolute inset-0 transition-opacity duration-500 max-md-gutters:hidden",y?"opacity-0":"opacity-70")})]}):null,a&&(0,s.jsx)("figcaption",{className:(0,o.mergeClasses)("mt-3.5 cursor-text px-8 py-2 text-center text-xs text-secondary",f&&"bg-transparent"),children:a})]})}},83038:(e,n,t)=>{"use strict";Object.defineProperty(n,Symbol.toStringTag,{value:"Module"});let s=t(14232),o=t(71894),i=function(e){let n=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(let t in e)if("default"!==t){let s=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(n,t,s.get?s:{enumerable:!0,get:()=>e[t]})}}return n.default=e,Object.freeze(n)}(s);function r({className:e,...n}){let t=o.mergeClasses("icon-md text-icon-default translate-z shrink-0",e);return i.createElement("svg",{viewBox:"0 0 24 24",fill:"currentColor",className:t,role:"img",...n},i.createElement("g",{id:"play-solid-icon"},i.createElement("path",{id:"Solid",fillRule:"evenodd",d:"M8.00625 2.80243C8.0182 2.8104 8.03019 2.81839 8.04222 2.82642L18.591 9.8589C18.8962 10.0623 19.1792 10.251 19.3965 10.4263C19.6234 10.6092 19.8908 10.8629 20.0447 11.234C20.2481 11.7245 20.2481 12.2758 20.0447 12.7663C19.8908 13.1374 19.6234 13.391 19.3965 13.574C19.1792 13.7493 18.8962 13.9379 18.591 14.1413L8.00628 21.1978C7.63319 21.4465 7.29772 21.6702 7.01305 21.8245C6.72818 21.9789 6.33717 22.1553 5.8808 22.128C5.29705 22.0932 4.75779 21.8046 4.40498 21.3382C4.12916 20.9736 4.05905 20.5504 4.02949 20.2278C3.99994 19.9053 3.99997 19.5021 4 19.0537L4 4.98975C4 4.97529 4 4.96087 4 4.9465C3.99997 4.49811 3.99994 4.09491 4.02949 3.77249C4.05905 3.44983 4.12916 3.02663 4.40498 2.66202C4.75779 2.19565 5.29705 1.90705 5.8808 1.87219C6.33717 1.84494 6.72818 2.02135 7.01305 2.17573C7.29771 2.33 7.63317 2.55368 8.00625 2.80243Z",clipRule:"evenodd"})))}r.displayName="PlaySolidIcon",n.PlaySolidIcon=r},87249:(e,n,t)=>{"use strict";t.d(n,{p:()=>r});var s=t(37876),o=t(66028),i=t(75298);let r=e=>{let{children:n,label:t}=e;return(0,s.jsxs)("div",{className:"mb-8 mt-6 flex gap-4",children:[(0,s.jsx)(i.ZS,{theme:"secondary",className:(0,o.mergeClasses)("mt-1 flex h-7 min-w-[28px] items-center justify-center rounded-full bg-element",t.length>=3&&"!text-xs"),children:t}),(0,s.jsx)("div",{className:"w-full max-w-[calc(100%-44px)] pt-1.5 prose-h2:!-mt-1.5 prose-h3:!-mt-1 prose-h4:!-mt-px [&>*:last-child]:!mb-0",children:"string"==typeof n?(0,s.jsx)(i.P,{children:n}):n})]})}}},e=>{e.O(0,[19243,90636,46593,38792],()=>e(e.s=62272)),_N_E=e.O()}]);