try{!function(){var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},t=(new e.Error).stack;t&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[t]="2aaf113b-6c22-49a4-8361-8d049a153329",e._sentryDebugIdIdentifier="sentry-dbid-2aaf113b-6c22-49a4-8361-8d049a153329")}()}catch(e){}(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[51331],{2521:(e,t,o)=>{"use strict";o.d(t,{h:()=>d});var n=o(37876),i=o(68340),r=o(8620),s=o(66208),a=o(40970);function l(e){let{name:t,note:o,className:i}=e;return(0,n.jsxs)("span",{className:"flex flex-1 items-center",children:[(0,n.jsx)("code",{className:i,children:t}),o&&(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("span",{className:"mx-3 min-w-8 flex-1 border-b border-default opacity-60 max-md-gutters:mx-2"}),(0,n.jsx)("code",{className:"text-default",children:o})]})]})}function d(e){let{files:t=[],...o}=e;return(0,n.jsx)("div",{className:"mb-4 overflow-x-auto whitespace-nowrap rounded-md border border-default bg-default p-2 pb-4 pr-4 text-xs",...o,children:function e(t){let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return t.map((t,d)=>{var c;let{name:p,note:h,files:u}=t,x=(c=p,/_layout\.[jt]sx?/.test(c)?s.LayoutAlt01Icon:c.startsWith("expo-")?a.PackageIcon:i.FileCode01Icon);return u.length>0?(0,n.jsxs)("div",{className:"mt-1 flex flex-col rounded-sm pl-2 pt-1",children:[(0,n.jsxs)("div",{className:"flex items-center",children:[" ".repeat(o),(0,n.jsx)(r.FolderIcon,{className:"mr-2 min-w-[20px] text-icon-tertiary opacity-60"}),(0,n.jsx)(l,{name:p,note:h,className:"text-secondary"})]}),e(u,o+1)]},p+"_"+d):p.length>0?(0,n.jsxs)("div",{className:"mt-1 flex items-center rounded-sm pl-2 pt-1",children:[" ".repeat(Math.max(o,0)),(0,n.jsx)(x,{className:"mr-2 min-w-[20px] text-icon-tertiary"}),(0,n.jsx)(l,{name:p,note:h,className:"text-default"})]},p+"_"+d):null})}(function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=[];function o(e,o){let n=e.split("/"),i=t;n.forEach((e,t)=>{let r=i.find(t=>t.name===e);if(r)i=r.files;else{let r={name:e,files:[]};o&&t===n.length-1&&(r.note=o),i.push(r),i=r.files}})}return e.forEach(e=>{Array.isArray(e)?o(e[0],e[1]):o(e)}),t}(t))})}},6800:(e,t,o)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/router/basics/core-concepts",function(){return o(34221)}])},8620:(e,t,o)=>{"use strict";Object.defineProperty(t,Symbol.toStringTag,{value:"Module"});let n=o(14232),i=o(71894),r=function(e){let t=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(let o in e)if("default"!==o){let n=Object.getOwnPropertyDescriptor(e,o);Object.defineProperty(t,o,n.get?n:{enumerable:!0,get:()=>e[o]})}}return t.default=e,Object.freeze(t)}(n);function s({className:e,...t}){let o=i.mergeClasses("icon-md text-icon-default translate-z shrink-0",e);return r.createElement("svg",{fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",className:o,role:"img",...t},r.createElement("g",{id:"folder-outline-icon"},r.createElement("path",{id:"Icon",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M13 7L11.8845 4.76892C11.5634 4.1268 11.4029 3.80573 11.1634 3.57116C10.9516 3.36373 10.6963 3.20597 10.4161 3.10931C10.0992 3 9.74021 3 9.02229 3H5.2C4.0799 3 3.51984 3 3.09202 3.21799C2.71569 3.40973 2.40973 3.71569 2.21799 4.09202C2 4.51984 2 5.0799 2 6.2V7M2 7H17.2C18.8802 7 19.7202 7 20.362 7.32698C20.9265 7.6146 21.3854 8.07354 21.673 8.63803C22 9.27976 22 10.1198 22 11.8V16.2C22 17.8802 22 18.7202 21.673 19.362C21.3854 19.9265 20.9265 20.3854 20.362 20.673C19.7202 21 18.8802 21 17.2 21H6.8C5.11984 21 4.27976 21 3.63803 20.673C3.07354 20.3854 2.6146 19.9265 2.32698 19.362C2 18.7202 2 17.8802 2 16.2V7Z"})))}s.displayName="FolderIcon",t.FolderIcon=s},34221:(e,t,o)=>{"use strict";o.r(t),o.d(t,{__N_SSG:()=>s,default:()=>c,headings:()=>l,meta:()=>a});var n=o(37876),i=o(91668),r=o(2521),s=!0;let a={modificationDate:"July 22, 2025",title:"Core concepts of file-based routing in Expo Router",description:"Learn the ground rules of Expo Router and how it relates to the rest of your code.",sidebar_title:"Core concepts",searchRank:10},l=[{depth:2,type:"text",title:"The rules of Expo Router"},{depth:3,type:"text",title:"1. All screens/pages are files inside of app directory"},{depth:3,type:"text",title:"2. All pages have a URL"},{depth:3,type:"text",title:"3. First index.tsx is the initial route"},{depth:3,type:"text",title:"4. Root _layout.tsx replaces App.jsx/tsx"},{depth:3,type:"text",title:"5. Non-navigation components live outside of app directory"},{depth:3,type:"text",title:"6. It's still React Navigation under the hood"},{depth:2,type:"text",title:"The rules of Expo Router applied"}];function d(e){let t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Before diving into how to construct your app's navigation tree with Expo Router, let's first understand the core concepts that make up the foundation of file-based routing in Expo Router, and how an Expo Router project might differ in structure from other React Native projects."}),"\n",(0,n.jsx)(t.h2,{id:"the-rules-of-expo-router",children:"The rules of Expo Router"}),"\n",(0,n.jsx)(t.h3,{id:"1-all-screenspages-are-files-inside-of-app-directory",children:"1. All screens/pages are files inside of app directory"}),"\n",(0,n.jsxs)(t.p,{children:["All navigation routes in your app are defined by the files and sub-directories inside the ",(0,n.jsx)(t.strong,{children:"app"})," directory. Every file inside the ",(0,n.jsx)(t.strong,{children:"app"})," directory has a default export that defines a distinct page in your app (except for the special ",(0,n.jsx)(t.strong,{children:"_layout"})," files)."]}),"\n",(0,n.jsxs)(t.p,{children:["Accordingly, directories inside ",(0,n.jsx)(t.strong,{children:"app"})," define groups of related screens together as stacks, tabs, or in other arrangements."]}),"\n",(0,n.jsx)(t.h3,{id:"2-all-pages-have-a-url",children:"2. All pages have a URL"}),"\n",(0,n.jsxs)(t.p,{children:["All pages have a URL path that matches the file's location in the ",(0,n.jsx)(t.strong,{children:"app"}),' directory, which can be used to navigate to that page in the address bar on the web, or as an app-specific deep link in a native mobile app. This is what is meant by Expo Router supporting "universal deep-linking". All pages in your app can be navigated to with a URL, regardless of the platform.']}),"\n",(0,n.jsx)(t.h3,{id:"3-first-indextsx-is-the-initial-route",children:"3. First index.tsx is the initial route"}),"\n",(0,n.jsxs)(t.p,{children:["With Expo Router, you do not define an initial route or first screen in code. Rather, when you open your app, Expo Router will look for the first ",(0,n.jsx)(t.strong,{children:"index.tsx"})," file matching the ",(0,n.jsx)(t.code,{children:"/"})," URL. This could be an ",(0,n.jsx)(t.strong,{children:"app/index.tsx"})," file, but it doesn't have to be. If the user should start by default in a deeper part of your navigation tree, you can use a ",(0,n.jsx)(t.a,{href:"/../../../../../../../router/basics/notation/#parentheses",children:"route group"})," (a directory where the name is surrounded in parenthesis), and that will not count as part of the URL. If you want your first screen to be a group of tabs, you might put all of the tab pages inside the ",(0,n.jsx)(t.strong,{children:"app/(tabs)"})," directory and define the default tab as ",(0,n.jsx)(t.strong,{children:"index.tsx"}),". With this arrangement, the ",(0,n.jsx)(t.code,{children:"/"})," URL will take the user directly to ",(0,n.jsx)(t.strong,{children:"app/(tabs)/index.tsx"})," file."]}),"\n",(0,n.jsx)(t.h3,{id:"4-root-_layouttsx-replaces-appjsxtsx",children:"4. Root _layout.tsx replaces App.jsx/tsx"}),"\n",(0,n.jsxs)(t.p,{children:["Every project should have a ",(0,n.jsx)(t.strong,{children:"_layout.tsx"})," file directly inside the ",(0,n.jsx)(t.strong,{children:"app"})," directory. This file is rendered before any other route in your app and is where you would put the initialization code that may have previously gone inside an ",(0,n.jsx)(t.strong,{children:"App.jsx"})," file, such as loading fonts or interacting with the splash screen."]}),"\n",(0,n.jsx)(t.h3,{id:"5-non-navigation-components-live-outside-of-app-directory",children:"5. Non-navigation components live outside of app directory"}),"\n",(0,n.jsxs)(t.p,{children:["In Expo Router, the ",(0,n.jsx)(t.strong,{children:"app"})," directory is exclusively for defining your app's routes. Other parts of your app, like components, hooks, utilities, and so on, should be placed in other top-level directories. If you put a non-route inside of the ",(0,n.jsx)(t.strong,{children:"app"})," directory, Expo Router will attempt to treat it like a route."]}),"\n",(0,n.jsxs)(t.p,{children:["Alternatively, you can create a ",(0,n.jsxs)(t.a,{href:"/../../../../../../../router/reference/src-directory",children:["top-level ",(0,n.jsx)(t.strong,{children:"src"})," directory"]})," and put your routes inside the ",(0,n.jsx)(t.strong,{children:"src/app"})," directory, with non-route components going in folders like ",(0,n.jsx)(t.strong,{children:"src/components"}),", ",(0,n.jsx)(t.strong,{children:"src/utils"}),", and so on. This is the only other directory structure that Expo Router will recognize."]}),"\n",(0,n.jsx)(t.h3,{id:"6-its-still-react-navigation-under-the-hood",children:"6. It's still React Navigation under the hood"}),"\n",(0,n.jsx)(t.p,{children:"While this may sound quite a bit different from React Navigation, Expo Router is actually built on top of React Navigation. You can think of Expo Router as an Expo CLI optimization that translates your file structure into React Navigation components that you previously defined in your own code."}),"\n",(0,n.jsx)(t.p,{children:"This also means that you can often refer to React Navigation documentation for how to style or configure navigation, as the default stack and tab navigators use the exact same options."}),"\n",(0,n.jsx)(t.h2,{id:"the-rules-of-expo-router-applied",children:"The rules of Expo Router applied"}),"\n",(0,n.jsx)(t.p,{children:"Let's apply these foundational rules of Expo Router to quickly identify key elements of the following project file structure:"}),"\n",(0,n.jsx)(r.h,{files:[["app/index.tsx"],["app/home.tsx"],["app/_layout.tsx"],["app/profile/friends.tsx"],["components/TextField.tsx"],["components/Toolbar.tsx"]]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"app/index.tsx"})," is the initial route, and will appear first when you open the app or navigate to your web app's root URL."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"app/home.tsx"})," is a page with the route ",(0,n.jsx)(t.code,{children:"/home"}),", so you can navigate to it with a URL like ",(0,n.jsx)(t.code,{children:"yourapp.com/home"})," in the browser, or ",(0,n.jsx)(t.code,{children:"myapp://home"})," in a native app."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"app/_layout.tsx"})," is the root layout. Any initialization code you may have previously put in ",(0,n.jsx)(t.strong,{children:"App.jsx"})," should go here."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"app/profile/friends.tsx"})," is a page with the route ",(0,n.jsx)(t.code,{children:"/profile/friends"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"TextField.tsx"})," and ",(0,n.jsx)(t.strong,{children:"Toolbar.tsx"})," are not in the ",(0,n.jsx)(t.strong,{children:"app"})," directory, so they will not be considered pages. They will not have a URL, and they cannot be the target of a navigation action. However, they can be used as components in the pages inside of the ",(0,n.jsx)(t.strong,{children:"app"})," directory."]}),"\n"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}},e=>{e.O(0,[90636,46593,38792],()=>e(e.s=6800)),_N_E=e.O()}]);